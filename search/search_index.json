{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#xhell","title":"Xhell","text":"<p>Shell library for Windows and Wrapper for sh for Linux and MacOS</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://osl-incubator.gthub.io/xh</li> </ul>"},{"location":"#features","title":"Features","text":"<p>TBD</p>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the osl-incubator/scicookie project template.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout.</p> <p>This project uses the src layout, which means that the package code is located at <code>./src/xh</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/osl-incubator/xh.git/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Xhell could always use more documentation, whether as part of the official Xhell docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/osl-incubator/xh.git/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started","text":"<p>Ready to contribute? Here\u2019s how to set up <code>xh</code> for local development.</p> <ol> <li>Fork the <code>xh</code> repo on GitHub.</li> <li>Clone your fork locally and change to the directory of your project:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/xh.git\n$ cd xh/\n</code></pre> <p>Also, create a remote to the upstream repository, you will need that later:</p> <pre><code>$ git remote add upstream https://github.com/osl-incubator/xh.git\n$ git fetch --all\n</code></pre>"},{"location":"contributing/#prepare-and-use-virtual-environment","title":"Prepare and use virtual environment","text":"<p>If you don't have yet conda installed in your machine, you can check the installation steps here: conda-forge/miniforge?tab=readme-ov-file#download After that, ensure that conda is already available in your terminal session and run:</p> <pre><code>$ conda env create env create --file conda/dev.yaml\n$ conda activate xh\n</code></pre> <p>Note: you can use <code>mamba env create</code> instead, if you have it already installed, in order to boost the installation step.</p>"},{"location":"contributing/#install-the-dependencies","title":"Install the dependencies","text":"<p>Now, you can already install the dependencies for the project:</p> <pre><code>$ poetry install\n```### Create a Development Branch\n\nMake a dedicated branch for your bugfix or feature.\n\n```bash\n$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre>"},{"location":"contributing/#make-changes-locally","title":"Make Changes Locally","text":"<p>You are now ready to implement your changes or improvements.</p>"},{"location":"contributing/#install-and-use-pre-commit-hooks","title":"Install and Use Pre-commit Hooks","text":"<ul> <li><code>xh</code> uses a set of <code>pre-commit</code> hooks to improve code quality. The hooks can   be installed locally using:</li> </ul> <pre><code>$ pre-commit install\n</code></pre> <p>This would run the checks every time a <code>git commit</code> is executed locally. Usually, the verification will only run on the files modified by that commit, but the verification can also be triggered for all the files using:</p> <pre><code>$ pre-commit run --all-files\n</code></pre> <p>If you would like to skip the failing checks and push the code for further discussion, use the <code>--no-verify</code> option with <code>git commit</code>.</p>"},{"location":"contributing/#unit-testing-with-pytest","title":"Unit Testing with <code>pytest</code>","text":"<p>This project uses <code>pytest</code> as a testing tool. <code>pytest</code> is responsible for testing the code, whose configuration is available in pyproject.toml. Additionally, this project also uses <code>pytest-cov</code> to calculate the coverage of these unit tests. For more information, check the section about tests later in this document.</p>"},{"location":"contributing/#commit-your-changes-and-push-your-branch-to-github","title":"Commit your changes and push your branch to GitHub","text":"<pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ul> <li>Submit a pull request through the GitHub website.</li> </ul>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your    new functionality into a function with a docstring, and add the feature to    the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#running-tests-locally","title":"Running tests locally","text":"<p>The tests can be executed using the <code>test</code> dependencies of <code>xh</code> in the following way:</p> <pre><code>$ python -m pytest\n</code></pre>"},{"location":"contributing/#running-tests-with-coverage-locally","title":"Running tests with coverage locally","text":"<p>The coverage value can be obtained while running the tests using <code>pytest-cov</code> in the following way:</p> <pre><code>$ python -m pytest --cov=xh tests/\n</code></pre> <p>A much more detailed guide on testing with <code>pytest</code> is available here.</p>"},{"location":"contributing/#automation-tasks-with-makim","title":"Automation Tasks with Makim","text":"<p>This project uses <code>makim</code> as an automation tool. Please, check the <code>.makim.yaml</code> file to check all the tasks available or run:</p> <pre><code>$ makim --help\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>Note: For a breaking change release, uses <code>!</code> at the end of the message prefix.</p> <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"Xhell","text":"In\u00a0[\u00a0]: Copied! <pre>import xh\n</pre> import xh In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"example/#xhell","title":"Xhell\u00b6","text":"<p>Xhell is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Xhell, run this command in your terminal:</p> <pre><code>pip install xh\n</code></pre> <p>This is the preferred method to install Xhell, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for Xhell can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone https://github.com/osl-incubator/xh.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/osl-incubator/xh.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>poetry install\n</code></pre>"},{"location":"api/","title":"Index","text":""},{"location":"api/#xh","title":"xh","text":"<p>Xhell.</p> <p>Modules:</p> <ul> <li> <code>core</code>           \u2013            <p>Core xh module.</p> </li> </ul>"},{"location":"api/#xh.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Return the program version.</p> Source code in <code>src/xh/__init__.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Return the program version.\"\"\"\n    try:\n        return importlib_metadata.version(__name__)\n    except importlib_metadata.PackageNotFoundError:  # pragma: no cover\n        return '0.1.0'  # semantic-release\n</code></pre>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> xh<ul> <li> core</li> </ul> </li> </ul>"},{"location":"api/core/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> core","text":""},{"location":"api/core/#xh.core","title":"core","text":"<p>Core xh module.</p> <p>xh.py - A Windows-compatible implementation mimicking the \"sh\" library API. If not on Windows, you might simply set:     from sh import *     xh = sh</p> <p>This implementation supports:  - Synchronous command execution (using communicate)  - Background execution (_bg=True) with output callbacks   (including interactive callbacks)  - Asynchronous (_async=True) and iterative (_iter=True) interfaces.</p> <p>Note: This is a minimal reimplementation and may not cover all advanced   features of sh.</p>"},{"location":"api/core/#xh.core.RunningCommand","title":"RunningCommand","text":"<pre><code>RunningCommand(\n    process: Popen[bytes],\n    stdout_callback: Optional[Callable[..., Any]] = None,\n    stderr_callback: Optional[Callable[..., Any]] = None,\n    done_callback: Optional[Callable[..., Any]] = None,\n)\n</code></pre> <p>Class representing a running command process.</p> <p>Parameters:</p> <ul> <li> <code>process</code>               (<code>Popen[bytes]</code>)           \u2013            <p>The subprocess.Popen instance representing the command.</p> </li> <li> <code>stdout_callback</code>               (<code>Optional[Callable[..., Any]]</code>, default:                   <code>None</code> )           \u2013            <p>A callback function for processing STDOUT output.</p> </li> <li> <code>stderr_callback</code>               (<code>Optional[Callable[..., Any]]</code>, default:                   <code>None</code> )           \u2013            <p>A callback function for processing STDERR output.</p> </li> <li> <code>done_callback</code>               (<code>Optional[Callable[..., Any]]</code>, default:                   <code>None</code> )           \u2013            <p>A callback function that is invoked when the process terminates.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>kill</code>             \u2013              <p>Kill the running process.</p> </li> <li> <code>terminate</code>             \u2013              <p>Terminate the running process.</p> </li> <li> <code>wait</code>             \u2013              <p>Wait for the command to complete.</p> </li> </ul> Source code in <code>src/xh/core.py</code> <pre><code>def __init__(\n    self,\n    process: subprocess.Popen[bytes],\n    stdout_callback: Optional[Callable[..., Any]] = None,\n    stderr_callback: Optional[Callable[..., Any]] = None,\n    done_callback: Optional[Callable[..., Any]] = None,\n) -&gt; None:\n    self.process = process\n    self.stdout_callback = stdout_callback\n    self.stderr_callback = stderr_callback\n    self.done_callback = done_callback\n    self.stdout_thread: Optional[threading.Thread] = None\n    self.stderr_thread: Optional[threading.Thread] = None\n</code></pre>"},{"location":"api/core/#xh.core.RunningCommand.kill","title":"kill","text":"<pre><code>kill() -&gt; None\n</code></pre> <p>Kill the running process.</p> Source code in <code>src/xh/core.py</code> <pre><code>def kill(self) -&gt; None:\n    \"\"\"Kill the running process.\"\"\"\n    self.process.kill()\n</code></pre>"},{"location":"api/core/#xh.core.RunningCommand.terminate","title":"terminate","text":"<pre><code>terminate() -&gt; None\n</code></pre> <p>Terminate the running process.</p> Source code in <code>src/xh/core.py</code> <pre><code>def terminate(self) -&gt; None:\n    \"\"\"Terminate the running process.\"\"\"\n    self.process.terminate()\n</code></pre>"},{"location":"api/core/#xh.core.RunningCommand.wait","title":"wait","text":"<pre><code>wait() -&gt; int\n</code></pre> <p>Wait for the command to complete.</p> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The exit code of the process.</p> </li> </ul> Source code in <code>src/xh/core.py</code> <pre><code>def wait(self) -&gt; int:\n    \"\"\"\n    Wait for the command to complete.\n\n    Returns\n    -------\n    int\n        The exit code of the process.\n    \"\"\"\n    if self.stdout_thread:\n        self.stdout_thread.join()\n    if self.stderr_thread:\n        self.stderr_thread.join()\n    ret = self.process.wait()\n    if self.done_callback:\n        self.done_callback(self, ret == 0, ret)\n    return ret\n</code></pre>"},{"location":"api/core/#xh.core.XH","title":"XH","text":"<p>Mimics the sh library interface by turning attribute access into commands.</p> <p>When an attribute is accessed (e.g. xh.ls), a function is returned that, when called, invokes _run_command with the attribute name as the command.</p> <p>Methods:</p> <ul> <li> <code>__getattr__</code>             \u2013              <p>Returns a callable that executes the command with the given name.</p> </li> </ul>"},{"location":"api/core/#xh.core.read_stream","title":"read_stream","text":"<pre><code>read_stream(\n    stream: BinaryIO,\n    callback: Callable[..., Any],\n    process: Popen[bytes],\n    stdin: Any,\n) -&gt; None\n</code></pre> <p>Read from a stream line by line and pass each line to the callback.</p> <p>If the callback returns True, the iteration stops.</p> <p>The callback signature is inspected to determine the number of parameters:   - 1 argument: callback(line)   - 2 arguments: callback(line, stdin)   - 3 or more arguments: callback(line, stdin, process)</p> <p>Parameters:</p> <ul> <li> <code>stream</code>               (<code>BinaryIO</code>)           \u2013            <p>The stream (STDOUT or STDERR) to read from.</p> </li> <li> <code>callback</code>               (<code>Callable[..., Any]</code>)           \u2013            <p>The callback function to process each line.</p> </li> <li> <code>process</code>               (<code>Popen[bytes]</code>)           \u2013            <p>The process associated with the stream.</p> </li> <li> <code>stdin</code>               (<code>Any</code>)           \u2013            <p>The STDIN of the process, used for interactive callbacks.</p> </li> </ul> Source code in <code>src/xh/core.py</code> <pre><code>def read_stream(\n    stream: BinaryIO,\n    callback: Callable[..., Any],\n    process: subprocess.Popen[bytes],\n    stdin: Any,\n) -&gt; None:\n    \"\"\"\n    Read from a stream line by line and pass each line to the callback.\n\n    If the callback returns True, the iteration stops.\n\n    The callback signature is inspected to determine the number of parameters:\n      - 1 argument: callback(line)\n      - 2 arguments: callback(line, stdin)\n      - 3 or more arguments: callback(line, stdin, process)\n\n    Parameters\n    ----------\n    stream : BinaryIO\n        The stream (STDOUT or STDERR) to read from.\n    callback : Callable[..., Any]\n        The callback function to process each line.\n    process : subprocess.Popen[bytes]\n        The process associated with the stream.\n    stdin : Any\n        The STDIN of the process, used for interactive callbacks.\n    \"\"\"\n    sig = inspect.signature(callback)\n    num_params = len(sig.parameters)\n    for line in iter(stream.readline, b''):\n        if not line:\n            break\n        try:\n            decoded_line = line.decode()\n        except UnicodeDecodeError:\n            decoded_line = line.decode('utf-8', errors='replace')\n        if num_params == 1:\n            result = callback(decoded_line)\n        elif num_params == 2:\n            result = callback(decoded_line, stdin)\n        elif num_params &gt;= 3:\n            result = callback(decoded_line, stdin, process)\n        if result is True:\n            break\n    stream.close()\n</code></pre>"}]}